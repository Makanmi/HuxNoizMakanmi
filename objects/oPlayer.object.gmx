<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerBody</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>h_speed = 0;
v_speed = 0;
j_speed = 18;
grav = 0.8;
walk_speed = 5;
depth = -100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oPlayer</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//    - PLAYER KEYS AND VARIABLES -    //

key_left = keyboard_check(ord('A'));
key_right = keyboard_check(ord('D'));
key_jump = keyboard_check(vk_space);

var grounded = place_meeting(x,y+1, oWall);

//Timer for animation
anticipation = 0;

// - PLAYER MOVEMENT -    //

//Left and right
var move = key_right - key_left;
h_speed = move * walk_speed;

//Jump
v_speed = v_speed + grav;

if ((grounded) &amp;&amp; (key_jump))
{ 
        v_speed = -j_speed;
}


//   - PLAYER COLLISSION -    //

//Horizontal
if (place_meeting(x+h_speed,y,oWall))
{
    while (!place_meeting(x+sign(h_speed),y,oWall))
    {
        x = x + sign(h_speed);       
    }    
    h_speed = 0;
}

x = x + h_speed;

//Vertical
if (place_meeting(x,y+v_speed,oWall))
{
    while (!place_meeting(x,y+sign(v_speed),oWall))
    {
        y = y + sign(v_speed);       
    }    
    v_speed = 0;
}

y = y + v_speed;

// - PLAYER LASH - //

//The end of the tongue is a bullet 
//If bullet collides with environment, it sticks
//If it collides with enemy, it damages


// - PLAYER ANIMATION SPRITES - //

if(!grounded)
{
    if(sign(v_speed) &gt; 0)
    {
        sprite_index = sFallBody;
        image_index = 0;
    }
    else
    {
        sprite_index = sJumpBody;
        image_speed = 0.25;
        
    }
}
else
{
    if(h_speed = 0)
    {
        sprite_index = sPlayerBody;       
        image_speed = 0.15;
        
    }
    else
    {
        
        sprite_index = sWalkBody;
        image_speed = 0.17;
    }
}

//Flip image on x-scale depending on direction player moves
if (h_speed != 0){
    image_xscale = sign(h_speed);
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
